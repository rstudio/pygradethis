% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fail_if_not_found.R
\name{py_fail_if_found}
\alias{py_fail_if_found}
\title{Signal a failing grade if something is to be found in the code}
\usage{
py_fail_if_found(gradecode_found, message = NULL, env = parent.frame())
}
\arguments{
\item{gradecode_found}{a `pygradecode.GradeCodeFound` Python object.}

\item{message}{a character.}

\item{env}{the parent.frame() environment as default or another environment.}
}
\value{
either a `pygradecode.GradeCodeFound` object or a `gradethis::fail()`
}
\description{
`py_fail_if_found()` is the opposite of `py_fail_if_not_found()` where
if the last result was successful, we signal a `gradethis::fail()`
}
\examples{
\dontrun{
# an example that contains two lambdas, but we're only focused on the
# one inside of `round()` so we attempt to find_lambdas() after finding all
# function calls with `find_functions('round')`
.user_code = 'lambda z: z + 2.5\nround((lambda x: x + 0.5)(2))'

py_find_functions(match = 'round') \%>\%
  py_find_lambdas() \%>\%
  py_fail_if_not_found("Heyyy, you were supposed to use a lamba!")
}
}
