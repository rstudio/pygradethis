% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fail_if_not_found.R
\name{py_fail_if_not_found}
\alias{py_fail_if_not_found}
\title{Return a failing grade based on the result of a find function}
\usage{
py_fail_if_not_found(gradecode_found, message = NULL, env = parent.frame())
}
\arguments{
\item{gradecode_found}{a `pygradecode.GradeCodeFound` Python object.}

\item{message}{a character.}

\item{env}{the parent.frame() environment as default or another environment.}
}
\value{
either a `pygradecode.GradeCodeFound` object or a `gradethis::fail()`
}
\description{
The `py_fail_if_not_found()` is a version of `gradecode::fail_if_not_found()`
with the difference being that it uses the `tblcheck::problem_grade()` method
to signal a `problem` that `pygradethis` will respond to with a `gradethis::fail()`
}
\examples{
\dontrun{
.user_code = '2 + 2'
# but you can signal a failing grade by following it with `py_fail_if_not_found()`
# this example has no custom message for the fail(), where it will pick the default
# value in options() for the type of request (e.g. `find_lambas.fail_if_found`)
py_find_lambdas() \%>\%
  py_fail_if_not_found()
}
}
