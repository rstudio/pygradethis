% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_dataframes.R
\name{py_check_series}
\alias{py_check_series}
\title{Checks that two Series are the same.}
\usage{
py_check_series(object = .result, expected = .solution, env = parent.frame())
}
\arguments{
\item{object}{A Series to be compared to `expected`..}

\item{expected}{The expected Series.}

\item{env}{The environment used for grading.}
}
\value{
A NULL if equal, a `pygradethis_problem` object otherwise
}
\description{
This checks both the names and the values are the same.
}
\examples{
\dontrun{
reticulate::py_run_string('import pandas as pd; import numpy as np')
# Plain Series
.result = reticulate::py_eval("pd.Series(data=[1, 2])", F)
.solution = reticulate::py_eval("pd.Series(data=[1, 2, 3])", F)
pygradethis::py_check_series()

# $type
# [1] "wrong_series"
#
# $expected
# 0 1 2
# 1 2 3
#
# $actual
# 0 1
# 1 2
#
# $message
# [1] "The Series do not match the expected Series."
#
# attr(,"class")
# [1] "wrong_series_problem" "pygradethis_problem"  "gradethis_problem" 

# Series w/ Index
.result = reticulate::py_eval("pd.Series(data={'a': 1, 'b': 2, 'd': 3})", F)
.solution =  reticulate::py_eval("pd.Series(data={'a': 1, 'b': 2, 'c': 3})", F)
pygradethis::py_check_series()

# $type
# [1] "wrong_series"
#
# $expected
# a b c
# 1 2 3
#
# $actual
# a b d
# 1 2 3
#
# $message
# [1] "The Series do not match the expected Series."
#
# attr(,"class")
# [1] "wrong_series_problem" "pygradethis_problem"  "gradethis_problem" 
}
}
